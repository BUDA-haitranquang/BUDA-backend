*** CÀI ĐẶT *** (VŨ)
- Tạo đủ các Table (SQL) 

I/ VAI TRÒ: SALE 

*** BÁN HÀNG ***

ORDER:
- Khách hàng
	+ Default "vãng lai"
	+ Số điện thoại (Unique)
	=> Check xem có trong DB chưa, nếu rồi thì lấy data rồi chỉ INSERT vào bảng ORDER, chưa thì phải tạo một "Khách hàng" mới
	+ Địa chỉ (không cần cho hàng ăn) 	// (Optional)
	+ Tên (có trong DB thì lấy tên cũ)
	-> Check trùng trước, tạo object sau
- Sản phẩm (Hoá đơn)
	+ Tìm kiếm + Sort sản phẩm (theo tên/giá)
	+ List dạng dễ nhìn để chọn (bấm để chọn)
	+ Số lượng
	+ Loại sản phẩm
	+ Giá tiền/sản phẩm
	=> Tổng tiền -> totalCost
	=> Số lượng còn lại trong kho
	+ Ngày tạo hoá đơn
=> Các trường cần ghi vào DB ở mục ORDER và ORDERITEMS, nếu khách hàng là khách hàng lần đầu thì phải ghi vào bảng Customers
=> Các hàm cần có:
	
	Order(String phoneNumber, String address, String Name, double totalCost)
	{
	}
	Có thể tách City, District bằng một số hàm (optional)
	void checkExist(String phoneNumber)  --  SQL
	private void record(Order order)
	{
		chạy hàm SQL
		- record vào bảng Order
		- record vào bảng OrderItems
	}
	private double getTotalCost(Order order)
	public void Print()
	public void Display()

II/ VAI TRÒ: QUẢN LÝ

*** NHẬP HÀNG ***

BUYORDER:
- Bên cung cấp
	+ Số điện thoại (Unique)
	=> Check xem có trong DB chưa, nếu rồi thì lấy data rồi chỉ INSERT vào bảng ORDER, chưa thì phải tạo một "Nhà cung cấp" mới
	+ Địa chỉ
	+ Tên
- Sản phẩm
	+ Số lượng (optional - do đơn vị không đồng nhất)
	+ Loại nguyên liệu
	+ Giá tiền/sản phẩm hoặc chỉ cần tổng hoá đơn
	=> Tổng chi
	=> Số lượng còn lại trong kho
	+ Ngày tạo hoá đơn
=> Các hàm cần có:

	BuyOrder(String phoneNumber, String address, String Name, double TotalCost)
	void checkExist(String phoneNumber)  --SQL
	Date getDate()
	void record(BuyOrder order)
	{
		- record vào bảng BuyOrder
		- record vào bảng BuyOrderItems
	}
	private double getTotalCost(BuyOrder order)
	public void Print()
	public void Display()

*** QUẢN KHO ***

TÌM KIẾM HOÁ ĐƠN: (Sắp xếp, theo khách hàng (SĐT),...)

TẠO SẢN PHẨM:
	- Tên sản phẩm
	- Giá sản phẩm
	- Chi phí 
	- Các thành phần tạo nên sản phẩm
=> Xoá sản phẩm, điều chỉnh chi phí, giá
=> setCost, setPrice
=> Các hàm cần có:

  - Thêm vào bảng DB Product

  - class Product
	String name
	Picture picture
	String description
	double cost
	double price
	List<Ingredient>
	Product(String name, double cost, double price, Picture picture, String desc)
	void setCost(double cost)
	void setPrice(double price)
	void setPicture(Picture picture)
	void setDesc(String desc)
	void setName(String name)
	... full getters/setters

TẠO NGUYÊN LIỆU
	- Gần giống sản phẩm
=> Hàm bổ sung:
	- Tạo, xem, chỉnh sửa số lượng, ảnh, giá (chỉ có hiệu lực từ lúc sửa đổi trở đi)

QUẢN LÝ SỐ LƯỢNG (dạng bảng biểu) => SQL
	- Tên sản phẩm
	- Ảnh sản phẩm
	- Giá
	- Chi phí
	- Số lượng
	=> THÔNG BÁO KHI NGUYÊN LIỆU SẮP HẾT

*** THỐNG KÊ *** (nặng về SQL)
THU CHI	(HẢI)
	- Doanh thu (theo ngày/tháng/năm) + Hàm Sort
		+ Tổng
		+ Sản phẩm
	- Chi phí (theo ngày/tháng/năm) + Hàm Sort
		+ Tổng
		+ Nguyên liệu
	- Lãi (Doanh thu - Chi phí)
	- Lịch sử giao dịch
		+ Mua
		+ Bán
		+ Merge

KHÁCH HÀNG (HẢI)
	- Mỗi khách hàng đã từng chi tiêu bao nhiêu tiền ở cửa hàng?
	- Biểu thị loại khách hàng thân thiết theo tuỳ chọn của quán
	-> "GROUP BY ID HAVING SUM(totalCost) > x"

SẢN PHẨM (ĐĂNG)
	- Doanh thu của sản phẩm?
	- Chi phí của sản phẩm? 			(nghiên cứu thêm)
	- Sắp xếp theo lợi nhuận, doanh thu		(nghiên cứu thêm)
	- Infographic chi phí -> Phân loại sản phẩm ra 3 loại để mô phỏng cho dễ vẽ (để trên bát, để trên đĩa, để trong cốc)

BÊN CUNG CẤP (NGỌC LINH + một số câu lệnh râu ria bên trên)			(buổi tới trình bày)
	- Các nguyên liệu có được tiêu thụ hết không?
	- Giá tốt không?
-> Khuyến nghị người bán nhập dữ liệu chuẩn hoá để tối ưu chương trình (VD 200g thịt x 1, 500g thịt x 1)